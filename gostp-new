#!/bin/sh

if [ "$#" -lt 4 ]; then
  usage; exit 1
fi

# option: +
user_id=$1; name=$2; bundle_id=$3; dest=$4;
# option: *
display_name="$name"
extension_name="$name"Pack
extension_bundle_id="$bundle_id.pack"
# default options
src="./"
dest_app_relative_path="app"
# perf options
export_gif_mp4=;

#set args
while test $# -gt 0
do
  local option="$1"
  case "$option" in
    -s|--source-path)
      src=$2
      ;;
    -a|--app-relative-path)
      dest_app_relative_path=$2
      ;;
    -n|--display-name)
      display_name=$2
      ;;
    -e|--extension-name)
      extension_name=$2
      ;;
    -b|--extension-bundle-id)
      extension_bundle_id=$2
      ;;
    --export-gif-mp4)
      export_gif_mp4=1
      ;;
  esac
  shift
done

python $(dirname $0)/build.py "$src" "$dest" \
--name "$name" \
--display-name "$display_name" \
--bundle-id "$bundle_id" \
--extension-name "$extension_name" \
--extension-bundle-id "$extension_bundle_id" \
--dest-relative-path "$dest_app_path"

#start setup app config ...
echo "[i] Staring xcode project configuration ..."
cd "$dest$dest_app_relative_path"

fastlane init -u $user_id
fastfile_path="./fastlane/Fastfile"
filefile_sep="#Fastfile@gostp-new"

if ! grep -qE "$filefile_sep" $fastfile_path
then
  fastfile_content=$(cat "$fastfile_path")
  cat >$fastfile_path <<EOF
#Fastfile@gostp-new
produce(username:"$user_id", app_name:"$name", app_identifier:"$bundle_id", skip_itc:true)
produce(username:"$user_id", app_name:"$extension_name", app_identifier:"$extension_bundle_id", skip_itc:true)
sigh(app_identifier:"$bundle_id")
sigh(app_identifier:"$extension_bundle_id")
update_project_provisioning(xcodeproj:"$name.xcodeproj",profile: "./AppStore_$bundle_id.mobileprovision", target_filter:"$name")
update_project_provisioning(xcodeproj:"$name.xcodeproj",profile: "./AppStore_$extension_bundle_id.mobileprovision", target_filter:"StickerPackExtension")
${fastfile_content}
EOF
fi

fastlane release

cd "$dest"

if [[ $export_gif_mp4 ]]
then
  #create gif
  echo "[i] Creating gifs from pngs ... $dest/gif"
  find . -maxdepth 1 -type f -name '*.png' | \
  while read FILE; do
    FILENAME="${FILE%.*}";
    apng2gif "$FILE" && mkdir gif;
    mv -f "$FILENAME".gif gif/;
    echo gif/"$FILENAME".gif;
  done &>/dev/null;

  #create mp4 from gifs
  echo "[i] Creating mp4 videos from gifs ... $dest/video"
  mkdir -p video; find gif -maxdepth 1 -type f -iname "*.gif" | \
  while read FILE; do
    FILENAME=$(basename ${FILE%.*});
    ffmpeg -stream_loop 5 -r 5 -i gif/$FILENAME.gif -pix_fmt yuv420p -vf "scale=trunc(iw/2)*2:trunc(ih/2)*2" video/$FILENAME.mp4 -y;
    echo video/$FILENAME.mp4;
  done &>/dev/null;
fi

echo "$dest"

# if [ ! -f $fastfile_path ]; then
# fi
